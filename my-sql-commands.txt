1. CREATE TABLE:
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    age INT
);

2. Modify a Table's Character Set/Collation
ALTER TABLE your_table_name CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;

3. Insert Data
INSERT INTO Artist (Artist_Name, Up_Date) VALUES ('John Doe', '2023-01-01');
INSERT INTO Works (Artist_ID, Title, Rating, Code, Source) VALUES (1, 'Work A', 8.5, 'ABC123', 'Source A');

4. Select Data:
SELECT * FROM Artist;
SELECT Artist.Artist_ID, Artist.Artist_Name, Artist.Up_Date,
       Works.Title, Works.Rating, Works.Code, Works.Source
FROM Artist
LEFT JOIN Works ON Artist.Artist_ID = Works.Artist_ID;

5. Delete Data:
DELETE FROM Artist WHERE Artist_ID = 1;

6. Drop a Procedure
DROP PROCEDURE IF EXISTS GetArtistDetails;

7. Command to List All MySQL Users
SELECT User, Host FROM mysql.user;
SELECT User, Host, authentication_string, plugin FROM mysql.user;

8. Command to List All MySQL Databases
SHOW DATABASES;

9. Create a New User
CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON *.* TO 'newuser'@'localhost' WITH GRANT OPTION;
FLUSH PRIVILEGES;
SHOW GRANTS FOR 'newuser'@'localhost';

CREATE USER 'newuser'@'%' IDENTIFIED BY 'securepassword';
CREATE USER 'newuser'@'_gateway' IDENTIFIED BY 'securepassword';

10. DROP a User
DROP USER 'newuser'@'localhost';

# Writing the list of MySQL commands to a file named "mysql_commands.txt"
mysql_commands = """
1. User Management:
-------------------
- Change Password for a User:
  ALTER USER 'username'@'host' IDENTIFIED BY 'newpassword';

- Delete a User:
  DROP USER 'username'@'host';

- Revoke Privileges from a User:
  REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'username'@'host';


2. Database Management:
-----------------------
- Rename a Database (requires a dump and restore):
  mysqldump -u username -p old_database > backup.sql
  mysql -u username -p -e "CREATE DATABASE new_database;"
  mysql -u username -p new_database < backup.sql

- Delete a Database:
  DROP DATABASE database_name;


3. Table Management:
--------------------
- Rename a Table:
  RENAME TABLE old_table_name TO new_table_name;

- Add a Column to a Table:
  ALTER TABLE table_name ADD COLUMN new_column_name datatype;

- Modify a Column in a Table:
  ALTER TABLE table_name MODIFY COLUMN column_name new_datatype;

- Delete a Column from a Table:
  ALTER TABLE table_name DROP COLUMN column_name;

- Delete a Table:
  DROP TABLE table_name;


4. Query Data:
--------------
- Filter Rows with WHERE Clause:
  SELECT * FROM table_name WHERE column_name = 'value';

- Sort Results with ORDER BY:
  SELECT * FROM table_name ORDER BY column_name ASC; -- or DESC

- Count Rows in a Table:
  SELECT COUNT(*) FROM table_name;

- Limit the Number of Results:
  SELECT * FROM table_name LIMIT 10; -- First 10 rows

- Find Unique Values:
  SELECT DISTINCT column_name FROM table_name;


5. Data Manipulation:
---------------------
- Update Data:
  UPDATE table_name SET column_name = 'new_value' WHERE condition;

- Delete Data:
  DELETE FROM table_name WHERE condition;

- Truncate a Table (delete all rows, reset auto-increment):
  TRUNCATE TABLE table_name;


6. Performance Optimization:
----------------------------
- Create an Index:
  CREATE INDEX index_name ON table_name (column_name);

- Drop an Index:
  DROP INDEX index_name ON table_name;

- Analyze a Table (update statistics):
  ANALYZE TABLE table_name;

- Optimize a Table:
  OPTIMIZE TABLE table_name;


7. Backup and Restore:
----------------------
- Export a Database:
  mysqldump -u username -p database_name > backup.sql

- Import a Database:
  mysql -u username -p database_name < backup.sql


8. Miscellaneous:
-----------------
- Check Current User:
  SELECT USER();

- Check Current Database:
  SELECT DATABASE();

- List All Processes:
  SHOW PROCESSLIST;

- Kill a Process:
  KILL process_id;

- Show All Variables:
  SHOW VARIABLES;


Advanced Query Features:
------------------------
- Subqueries:
  SELECT column_name FROM table_name WHERE column_name IN (SELECT column_name FROM another_table);

- Joins:
  SELECT * FROM table1
  INNER JOIN table2 ON table1.common_column = table2.common_column;

- Group By:
  SELECT column_name, COUNT(*) FROM table_name GROUP BY column_name;
"""

